syntax="proto3";
option java_outer_classname = "hdfs";
option java_package = "HDFS";
message OpenFileRequest {
   string fileName = 1; // fileName
   bool forRead = 2; // true, for read; false for write
}

message OpenFileResponse {
   int32 status = 1; // result of the call
   int32 handle = 2; // file handle. Use this to close file on write
// for read, the numbers for the various blocks. Not populated in write mode
  repeated int32 blockNums = 3;
}

message CloseFileRequest {
   int32 handle = 1; // obtained from OpenFile
}

message CloseFileResponse {
   int32 status = 1;
}

message WriteBlockRequest {
   BlockLocations blockInfo = 1;
  repeated bytes data = 2;
    bool Replicate = 3;
}

message WriteBlockResponse {
   int32 status = 1;
}

message DataNodeLocation {
   string ip = 1	;
   int32 port = 2;
}

message BlockLocations {
   int32 blockNumber = 1;
  repeated DataNodeLocation locations = 2;
}

message BlockLocationRequest {
  repeated int32 blockNums = 1;
}

message BlockLocationResponse {
   int32 status = 1;
  repeated BlockLocations blockLocations = 2;
}

message AssignBlockRequest {
   int32 handle = 1; // obtain using call to OpenFile
}

message AssignBlockResponse {
   int32 status = 1;
   BlockLocations newBlock = 2;
}

message ListFilesRequest {
   string dirName = 1; // unused, place holder to support mkdir, etc
}

message ListFilesResponse {
   int32 status = 1;
  repeated string fileNames = 2;
}

message ReadBlockRequest {
   int32 blockNumber = 1;
}

message ReadBlockResponse {
   int32 status = 1;
  repeated bytes data = 2;
}

message BlockReportRequest {
   int32 id = 1; // identity of the DN. All communication to the NN uses the same id
   DataNodeLocation location = 2;
  repeated int32 blockNumbers = 3;
}

message BlockReportResponse {
  repeated int32 status = 1;
}

message HeartBeatRequest {
   int32 id = 1;
}

message HeartBeatResponse {
   int32 status = 1;
}